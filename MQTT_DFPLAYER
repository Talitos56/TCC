#include <WiFi.h>
#include <PubSubClient.h>
#include <Arduino.h>
#include "DFRobotDFPlayerMini.h"

const char* ssid = "TCC";
const char* password = "garup2021";
const char* mqtt_server = "broker.mqtt-dashboard.com";

WiFiClient espClient;
PubSubClient client(espClient);

#define MSG_BUFFER_SIZE  (50)
#define LIGA 0
#define DESLIGA 1
char msg[MSG_BUFFER_SIZE];
int RELE = 18;
int estado = 0;
int estadoplay = 0;

HardwareSerial mySoftwareSerial(1);
DFRobotDFPlayerMini myDFPlayer;

void setup_wifi() {

  delay(10);
  // COMEÇAMOS CONECTANDO O DISPOSITIVO A UMA REDE WIFI
  Serial.println();
  Serial.print("Conectando ao ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi conectado");
  Serial.println("endereço IP: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Mensagem chegou [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();

  if ((char)payload[0] == '1' && estado == 0) {
    digitalWrite(RELE, LIGA);
    estado = 1;
    snprintf (msg, MSG_BUFFER_SIZE, "Caixas ligadas");
    Serial.print("Publish message: ");
    Serial.println(msg);
    client.publish("caixas_acusticas", msg);   
  } 
  else if ((char)payload[0] == '0' && estado == 1) {
    digitalWrite(RELE, DESLIGA);
    estado = 0;
    estadoplay = 0;
    snprintf (msg, MSG_BUFFER_SIZE, "Caixas desligadas");
    Serial.print("Publish message: ");
    Serial.println(msg);
    client.publish("caixas_acusticas", msg);  
  }
  else if ((char)payload[0] == 'P' && estado == 1) {
    Serial.println(F("start--------------------"));
    myDFPlayer.start();
    estadoplay = 1;
    snprintf (msg, MSG_BUFFER_SIZE, "Tocando");
    Serial.print("Publish message: ");
    Serial.println(msg);
    client.publish("som", msg); 
  }
  else if ((char)payload[0] == 'p' && estadoplay == 1) {
    Serial.println(F("pause--------------------"));
    myDFPlayer.pause();
    estadoplay = 0;
    snprintf (msg, MSG_BUFFER_SIZE, "Pause");
    Serial.print("Publish message: ");
    Serial.println(msg);
    client.publish("som", msg); 
  }
  else if ((char)payload[0] == '+' && estadoplay == 1) {
    Serial.println(F("up--------------------"));
    myDFPlayer.volumeUp();
    snprintf (msg, MSG_BUFFER_SIZE, "Volume+");
    Serial.print("Publish message: ");
    Serial.println(msg);
    client.publish("som", msg);
  }
  else if ((char)payload[0] == '-' && estadoplay == 1) {
    Serial.println(F("down--------------------"));
    myDFPlayer.volumeDown();
    snprintf (msg, MSG_BUFFER_SIZE, "Volume-");
    Serial.print("Publish message: ");
    Serial.println(msg);
    client.publish("som", msg);
  }
  else if ((char)payload[0] == 'V' && estadoplay == 1) {
    Serial.println(F("previous--------------------"));
    myDFPlayer.previous();
    snprintf (msg, MSG_BUFFER_SIZE, "Música Anterior");
    Serial.print("Publish message: ");
    Serial.println(msg);
    client.publish("som", msg);
  }
  else if ((char)payload[0] == 'A' && estadoplay == 1) {
    Serial.println(F("next--------------------"));
    myDFPlayer.next();
    snprintf (msg, MSG_BUFFER_SIZE, "Próxima Música");
    Serial.print("Publish message: ");
    Serial.println(msg);
    client.publish("som", msg);
  }
  else if ((char)payload[0] == 'S' && estadoplay == 1) {
    Serial.println(F("stop--------------------"));
    myDFPlayer.stop();
    estadoplay = 0;
    snprintf (msg, MSG_BUFFER_SIZE, "Stop");
    Serial.print("Publish message: ");
    Serial.println(msg);
    client.publish("som", msg);
  }
}

void reconnect() {
  // FAZ O LOOP ATÉ QUE ESTEJA CONECTADO
  while (!client.connected()) {
    Serial.print("\nFazendo a conexão MQTT...");
    // CRIA UMA ID DE CLIENTE ALEATÓRIA
    String clientId = "ESP32Client-";
    clientId += String(random(0xffff), HEX);
    // VERIFICA SE A CONEXÃO FOI FEITA
    if (client.connect(clientId.c_str())) {
      Serial.println("conectado");
      // SE ESTÁ CONECTADO PUBLICA UMA MENSAGEM
      client.publish("publisher_esp32-01", "ESP32-01");
      client.publish("som", "DFPlayer Online");
      // FAZ A INSCRIÇÃO DO CLIENTE
      client.subscribe("subscriber_esp32");
    } else {
      Serial.print("falhou, rc=");
      Serial.print(client.state());
      Serial.println(" tentando de novo em 5 segundos");
      // SE A CONEXÃO COM O SERVIDOR FALHOU, ESPERA 5 SEGUNDOS PARA TENTAR NOVA CONEXÃO
      delay(5000);
    }
  }
}

void setup() {
  pinMode(RELE, OUTPUT); //DEFINE RELE COMO SAÍDA
  digitalWrite(RELE, DESLIGA); //COMEÇA O PROGRAMA COM O RELE DESLIGADO  
  
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, 1883); //FAZ A COMUNICAÇÃO COM O BROKER NA PORTA 1883
  client.setCallback(callback);
  mySoftwareSerial.begin(9600, SERIAL_8N1, 16, 17);  // speed, type, RX, TX
  Serial.println();
  Serial.println(F("DFRobot DFPlayer Mini Demo"));
  Serial.println(F("Inicializando DFPlayer ... (Pode demorar 3~5 segundos)"));
  
  if (!myDFPlayer.begin(mySoftwareSerial)) {  //USA SOFTWARESERIAL PARA FAZER A COMUNICAÇÃO COM O MP3
    
    Serial.println(myDFPlayer.readType(),HEX);
    Serial.println(F("Não pôde iniciar:"));
    Serial.println(F("1.Por favor confira a ligação do circuito!"));
    Serial.println(F("2.Por favor insira um cartão SD!"));
    while(true);
  }
    Serial.println(F("DFPlayer Mini online."));
    myDFPlayer.setTimeOut(500); //Set serial communication time out 500ms
  
    //----Set volume----
    myDFPlayer.volume(10);  //Set volume value (0~30).
    myDFPlayer.volumeUp(); //Volume Up
    myDFPlayer.volumeDown(); //Volume Down
  
    //----Set different EQ----
    myDFPlayer.EQ(DFPLAYER_EQ_NORMAL);
    myDFPlayer.outputDevice(DFPLAYER_DEVICE_SD);
    int delayms=100;
    
    //----Read information----
    Serial.println(F("\nreadState--------------------"));
    Serial.println(myDFPlayer.readState()); //read mp3 state
    Serial.println(F("readVolume--------------------"));
    Serial.println(myDFPlayer.readVolume()); //read current volume
    Serial.println(F("readFileCounts--------------------"));
    Serial.println(myDFPlayer.readFileCounts()); //read all file counts in SD card
    Serial.println(F("readCurrentFileNumber--------------------"));
    Serial.println(myDFPlayer.readCurrentFileNumber()); //read current play file number
    Serial.println(F("readFileCountsInFolder--------------------"));
    Serial.println(myDFPlayer.readFileCountsInFolder(3)); //read fill counts in folder SD:/03
    Serial.println(F("--------------------"));
    //Serial.println(F("myDFPlayer.play(1)"));
    //myDFPlayer.play(1);  //Toca o primeiro mp3
    myDFPlayer.stop();  //começa parado aguardando o play
}

void loop() {

  if (!client.connected()) {
    reconnect();
  }
  client.loop();
 
  if (myDFPlayer.available()) {
  if (myDFPlayer.readType()==DFPlayerPlayFinished) {
    Serial.println(myDFPlayer.read());
    Serial.println(F("next--------------------"));
     myDFPlayer.next();  //Play next mp3 every 3 second.
    Serial.println(F("readCurrentFileNumber--------------------"));
    Serial.println(myDFPlayer.readCurrentFileNumber()); //read current play file number
    //delay(500);
  }
}}
